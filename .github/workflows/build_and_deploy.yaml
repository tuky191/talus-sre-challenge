name: Build Image and Deploy Infra
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    tags:
      - v*
env:
  tf_actions_working_dir: ./infra/terraform
  TF_CLOUD_TOKEN: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
  TERRAFORM_WORKSPACE_ID: ${{ vars.TERRAFORM_WORKSPACE_ID }}
  ORGANIZATION_NAME: ${{ vars.TERRAFORM_ORGANIZATION_NAME }}
  WORKSPACE_NAME: ${{ vars.TERRAFORM_WORKSPACE_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # https://docs.docker.com/build/ci/github-actions/multi-platform/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the github container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build docker image
        id: build
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' }}
          file: Dockerfile
          platforms: linux/amd64
          tags: ${{ env.DOCKER_METADATA_OUTPUT_TAGS }}
          labels: ${{ env.DOCKER_METADATA_OUTPUT_LABELS }}

      - name: Get image digest from build-push-action
        run: echo "backend_image=ghcr.io/${{ github.repository }}@${{ steps.build.outputs.digest }}" >> $GITHUB_ENV

      - name: Update backend image
        run: |
          bash bin/create_or_update_variable.sh "backend_image" "${{ env.backend_image }}" false

  terraform-setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform organization
        run: |
          bash bin/create_or_get_organization.sh "$ORGANIZATION_NAME"

      - name: Set up Terraform workspace
        run: |
          bash bin/create_or_get_workspace.sh "$WORKSPACE_NAME"

      - name: Create or update domain variable
        run: |
          bash bin/create_or_update_variable.sh "domain" "${{ vars.TERRAFORM_DOMAIN }}" false

      - name: Create or update google_credentials variable
        run: |
          bash bin/create_or_update_variable.sh "google_credentials" "${{ secrets.GOOGLE_CREDENTIALS }}" true

      - name: Create or update google_project variable
        run: |
          bash bin/create_or_update_variable.sh "google_project" "${{ vars.TERRAFORM_GOOGLE_PROJECT }}" false

      - name: Create or update google_region variable
        run: |
          bash bin/create_or_update_variable.sh "google_region" "${{ vars.TERRAFORM_GOOGLE_REGION }}" false

      - name: Create or update grafana_admin_password variable
        run: |
          bash bin/create_or_update_variable.sh "grafana_admin_password" "${{ secrets.GRAFANA_ADMIN_PASSWORD }}" true

      - name: Create or update pat_token variable
        run: |
          bash bin/create_or_update_variable.sh "pat_token" "${{ secrets.PAT_TOKEN }}" true

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: [terraform-setup, build]
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Create terraform.tf.template
        run: |
          cat <<EOF > terraform.tf.template
          terraform {
            required_version = ">= 1.9.5"
            
            cloud {
              organization = "\${ORGANIZATION_NAME}"
              workspaces {
                name = "\${WORKSPACE_NAME}"
              }
            }
            required_providers {
              google = {
                source  = "hashicorp/google"
                version = "5.37.0"
              }
            }
          }
          EOF

      - name: Create terraform.tf using envsubst
        run: |
          envsubst < terraform.tf.template > terraform.tf
        env:
          ORGANIZATION_NAME: ${{ env.ORGANIZATION_NAME }}
          WORKSPACE_NAME: ${{ env.WORKSPACE_NAME }}

      - name: Display content of terraform.tf
        run: cat terraform.tf

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve
